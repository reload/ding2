<?php

/**
 * @file
 * Ding React apps.
 */

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function ding_react_libraries_info() {
  return [
    'ddb-react' => [
      'name' => 'DDB React',
      'vendor url' => 'https://github.com/reload/ddb-react',
      'download url' => 'https://github.com/reload/ddb-react/releases/download/latest/dist.zip',
      'version' => '1.0.0',
      'files' => [
        'js' => [
          'runtime.js' => ['scope' => 'footer', 'group' => JS_LIBRARY],
          'bundle.js' => ['scope' => 'footer', 'group' => JS_LIBRARY],
          'mount.js' => ['scope' => 'footer', 'group' => JS_LIBRARY],
        ],
        'css' => ['components.css'],
      ],
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function ding_react_menu() {
  $items['admin/config/ding/react'] = array(
    'title' => 'React components',
    'description' => 'Configure integration with React components.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_react_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_react_ding_provider_user() {
  return [
    'openplatform_token' => [
      'required' => TRUE,
    ]
  ];
}

/**
 * Implements hook_user_login().
 */
function ding_react_user_login(&$edit, $account) {
  ding_react_user_migrate($account);
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_react_ding_entity_buttons($type, $entity, $view_mode = 'default', $widget = 'default') {
  if ($type == 'ding_entity') {
    $return = [];

    $data = [
      'id' => $entity->ding_entity_id,
      'text' => t('Add to checklist'),
      'error-text' => t('An error occurred'),
      'success-text' => t('Added to checklist'),
      'login-url' => ding_react_login_url(),
    ];

    $return[] = ding_react_app('add-to-checklist', $data);

    return $return;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_react_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_page_build().
 */
function ding_react_page_build() {
  $token = ding_provider_invoke('openplatform_token', 'get');

  if ($token) {
    drupal_add_js('window.localStorage.setItem("ddb-token", "' . $token . '")', 'inline');
  } else {
    drupal_add_js('window.localStorage.removeItem("ddb-token", "' . $token . '")', 'inline');
  }

  $authenticated = ($token) ? 'true' : 'false';
  drupal_add_js("window.ddbReact = { 'userAuthenticated': ${authenticated} }", 'inline');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_react_form_search_block_form_alter(&$form, $form_state) {
  global $user;

  // Check if function exists so we don't need to have a hard dependency on
  // ting_search and opensearch.
  if (!function_exists('ting_search_current_results') && module_exists('opensearch')) {
    return;
  }

  $result = ting_search_current_results();

  if (!$result) {
    return;
  }

  $searchRequest = $result->getSearchRequest();

  // This form alter get called a lot, and most of the time the result doesn't
  // have a searchRequest. Luckily it seems to have in the exact case where we
  // want to add the button.
  if (!$searchRequest) {
    return;
  }

  $fullTextQuery = $searchRequest->getFullTextQuery();
  $title = $fullTextQuery;

  // In order to get the correct CQL query, it needs to be run through
  // TingSearchCqlDoctor.
  $cqlDoctor = new TingSearchCqlDoctor($fullTextQuery);
  $fullTextQuery = $cqlDoctor->string_to_cql();

  $data = [
    'default-title' => $title,
    'search-query' => $fullTextQuery,
    'login-url' => ding_react_login_url(),
    'button-text' => t('Add to followed searches'),
    'label' => t('Title for followed search'),
    'add-button-text' => t('Add'),
    'error-text' => t('An error occurred'),
    'success-text' => t('Added to your followed searches.'),
    'success-link-url' => url("user/{$user->uid}/followed-searches"),
    'success-link-text' => t('See your followed searches.'),
    'error-required-message' => t('Title is required.'),
    'error-max-length-message' => t('Title must not be longer than 256 characters.'),
    'help-text' => t('To follow your search query you must provide a title.'),
  ];

  $add_search_button = ding_react_app('add-to-searchlist', $data);

  $form['search_block_form']['#field_suffix'] = drupal_render($add_search_button);
  $form['#attributes']['class'][] = 'has-add-to-searchlist';
}

/**
 * Return render array for an app.
 *
 * @param string $name
 *   Name of the app.
 * @param array $data
 *   Data for the app.
 *
 * @return array
 *   The app render array.
 */
function ding_react_app($name, array $data = []) {
  $attachments = [
    'libraries_load' => [
      ['ddb-react'],
    ],
    'js' => [
      // Weight needs to be > 0 to make the app code run after the libraries.
      libraries_get_path('ddb-react') . '/' . $name . '.js' => ['scope' => 'footer', 'group' => JS_LIBRARY, 'weight' => 1],
      drupal_get_path('module', 'ding_react') . '/js/ding-react.js' => ['scope' => 'footer'],
    ],
  ];

  if (file_exists(libraries_get_path('ddb-react') . '/' . $name . '.css')) {
    $attachments['css'] = [
      libraries_get_path('ddb-react') . '/' . $name . '.css' => ['weight' => 1]
    ];
  }

  $attributes = [];

  $attributes['data-ddb-app'] = $name;

  foreach ($data as $name => $value) {
    $attributes['data-' . $name] = $value;
  }

  $build = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => $attributes,
    // Supply an empty string so we don't create a self closing element.
    '#value' => '',
    '#attached' => $attachments,
  ];

  return $build;
}

/**
 * Generate a login url which can be used as a prop for React apps.
 *
 * @return string
 *   Login url.
 */
function ding_react_login_url() {
  return ding_provider_invoke(
    'openplatform_token',
    'login_url',
    ['query' => ['destination' => current_path()]]
  );
}

function ding_react_admin_settings_form() {
  $form = [];

  $form['services'] = [
    '#type' => 'fieldset',
    '#title' => t('Services')
  ];

  $form['services']['ding_react_material_list_url'] = [
    '#type' => 'textfield',
    '#title' => t('Material List'),
    '#description' => t('Url to the Material List service instance to use.'),
    '#default_value' => variable_get('ding_react_material_list_url', ''),
    '#required' => TRUE,
    '#element_validate' => [ 'ding_react_element_validate_url' ],
  ];

  $form['services']['ding_react_follow_searches_url'] = [
    '#type' => 'textfield',
    '#title' => t('Follow Searches'),
    '#description' => t('Url to the Follow Searches service instance to use.'),
    '#default_value' => variable_get('ding_react_follow_searches_url', ''),
    '#required' => TRUE,
    '#element_validate' => [ 'ding_react_element_validate_url' ],
  ];

  $form['services']['ding_react_migrate_timeout'] = [
    '#type' => 'textfield',
    '#title' => t('Migration timeout'),
    '#description' => t('The number of seconds to wait for an external service to complete a migration during login. A high timeout reduces risk of the migration not completing. A low timeout prevents the login procedure from stalling. Incomplete migrations will be retried the next time the user logs in.'),
    '#default_value' => variable_get('ding_react_migrate_timeout', 5),
    '#required' => TRUE,
    '#element_validate' => [ 'element_validate_integer_positive' ],
  ];

  return system_settings_form($form);
}

function ding_react_element_validate_url($element, &$form_state, $form) {
  if (!empty($element['#value']) && !valid_url($element['#value'], true)) {
    form_error($element, t('Please enter a valid url.'));
  }
}

/**
 * Migrate a user account from using a legacy user id to new token-based one.
 *
 * @param \stdClass $account
 *   The user account to migrate.
 */
function ding_react_user_migrate(stdClass $account) {
  $migrated_prefix = 'migrated-';

  $legacy_uid = $account->openlist_uid;

  try {
    $token = ding_provider_invoke('openplatform_token', 'get');
  } catch (DingProviderNoProvider $e) {
    $token = NULL;
  } catch (DingProviderDoesntImplement $e) {
    $token = NULL;
  }

  if (!empty($legacy_uid)
    && !preg_match("/${migrated_prefix}/", $legacy_uid)
    && !empty($token)) {
    $migrate_request_options = [
      'method' => 'PUT',
      // Use a relatively low timeout. We do not what login to stall if services
      // are slow to respond. Then migration will have to wait.
      'timeout' => variable_get('ding_react_migrate_timeout', 5),
      'headers' => [
        'Authorization' => "Bearer ${token}",
      ]
    ];

    $material_list_url = variable_get('ding_react_material_list_url');
    $response = drupal_http_request("${material_list_url}/migrate/${legacy_uid}",
      $migrate_request_options);
    if (!empty($response->error)) {
      watchdog(
        'ding_react',
        'Unable to migrate user data in material list: (%code) %message %data',
        [
          '%code' => $response->code,
          '%message' => $response->error,
          '%data' => $response->data
        ],
        WATCHDOG_ERROR
      );
      return;
    }

    $follow_searches_url = variable_get('ding_react_follow_searches_url');
    $response = drupal_http_request("${follow_searches_url}/migrate/${legacy_uid}",
      $migrate_request_options);
    if (!empty($response->error)) {
      watchdog(
        'ding_react',
        'Unable to migrate user data in Follow Searches: (%code) %message %data',
        [
          '%code' => $response->code,
          '%message' => $response->error,
          '%data' => $response->data
        ],
        WATCHDOG_ERROR
      );
      return;
    }

    // Add a prefix to show the user has been migrated. This way we do not
    // throw away data yet but avoid migrating users multiple times.
    $account->openlist_uid = $migrated_prefix . $legacy_uid;
    user_save($account);

    watchdog(
      'ding_react',
      'Migrated user data for material list og follow searches',
      [],
      WATCHDOG_NOTICE
    );
  }
}

/**
 * Implements hook_schema_alter().
 */
function ding_react_schema_alter(&$schema) {
  if (db_field_exists('users', 'openlist_uid')) {
    // Migration on existing sites requires the openlist_uid user field
    // originally defined by the now obsolete ting_openlist module.
    $schema['users']['fields']['openlist_uid'] = array(
      'type' => 'char',
      'not null' => TRUE,
      'default' => 0,
      'length' => 255,
      'description' => 'The openlist user id',
    );
  }
}
